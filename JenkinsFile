pipeline {
    agent any
    triggers {
    githubPush()
  }
    stages {
        stage('Build') {
            steps {
                echo "Stage: Build"
                echo "Description: This stage builds the code using a build automation tool to compile and package your code."
                echo "Tool: Maven, Gradle, Ant"
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo "Stage: Unit and Integration Tests"
                echo "Description: This stage runs unittests to ensure that individual components of the code function as expected."
                echo "It also performs integration tests to verify that different parts of the application work together properly."
                echo "Tool: JUnit, TestNG, NUnit"
            }
            post {
                always {
                    script {
                        def testStatus = currentBuild.resultIsBetterOrEqualTo("SUCCESS") ? "succeeded" : "failed"
                        emailext body: "Unit and Integration Tests stage ${testStatus}.\n\nPlease find the attached logs.",
                            mimeType: 'text/plain',
                            subject: "Unit and Integration Tests Stage Notification",
                            to: "tahatalib85@gmail.com",
                            attachLog: true
                    }
                }
            }
        }
        stage('Code Analysis') {
            steps {
                echo "Stage: Code Analysis"
                echo "Description: In this stage, a code analysis tool is integrated to analyzethe code and ensure it meets industry standards."
                echo "Tool: SonarQube, Checkstyle, PMD"
            }
        }
        stage('Security Scan') {
            steps {
                echo "Stage: Security Scan"
                echo "Description: In this stage, a security scan is performed on the code to identify any vulnerabilities or security issues."
                echo "Tool: OWASP ZAP, SonarQube (for security analysis), Snyk"
            }
            post {
                always {
                    script {
                        def securityStatus = currentBuild.resultIsBetterOrEqualTo("SUCCESS") ? "succeeded" : "failed"
                        emailext body: "Security Scan stage ${securityStatus}.\n\nPlease find the attached logs.",
                            mimeType: 'text/plain',
                            subject: "Security Scan Stage Notification",
                            to: "tahatalib85@gmail.com",
                            attachLog: true
                    }
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo "Stage: Deploy to Staging"
                echo "Description: This stage deploys the application to a staging server, typically an AWS EC2 instance,"
                echo "for testing purposes. This allows testing in an environment similar to production before deploying to production."
                echo "Tool: AWS CLI, Jenkins Deploy Plugin"
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo "Stage: Integration Tests on Staging"
                echo "Description: This stage runs integration tests on the application deployed to the staging environment."
                echo "These tests ensure that the application behaves correctly in a production-like setting."
                echo "Tool: JUnit, TestNG, NUnit"
            }
        }
        stage('Deploy to Production') {
            steps {
                echo "Stage: Deploy to Production"
                echo "Description: This stage deploys the application to a production server, typically an AWS EC2 instance,"
                echo "for public use. The application is now available to users."
                echo "Tool: AWS CLI, Jenkins Deploy Plugin"
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
